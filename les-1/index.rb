
num = 10
flo = 1.9
str = 'POOOOOOWER'

arr = [num,flo,str]
arr0 = [num,flo,str]

hash_ = { "a" => 1000, "b" => 1000000, "c" => 324 }
hesh_ = { "a" => 1000, "b" => 1000000, "c" => 324 }

range = ('a'...'e').to_a

del = 'hello world'
eted = 'hello'

def _third_task
	results = [10, 2, 5, 12, 11, 11, 4]
	results.each_with_index {|v, i| puts "Партия: #{i.next}: / Выпало очков: #{v}"}
end

def _log(a) puts(a) end

def _del(a,b) return a.divmod(b) end

def _del_str(a,b) 
	if a.size >= b.size
		a = a.delete b
		_log(a)
	else 
		puts 'error'
	end
		
end 
# ---- Fixnum --- 

# auto increment 
_log(num.next) # +

# является ли число нулем
_log(num.zero?) # + 

# модуль числа
_log(num.abs) # +

# ---- Float ----

# округление до целой части вниз
_log(flo.floor) # + 

_log(flo.ceil) # вверх
_log(flo.round) # серединка

# возвращение рещультат деления 2-х чисел в виде массива с целой частью и с отстатком от деления
_log(_del(num,flo))

# ---- String ----

# Метод, приводящий все символы в
# строке к нижнему регистру

_log(str.downcase)

# Метод, возвращающий следующий
# символ за текущим (согласно кодам
# ASCII)

_log(str.next)

# Метод изменяющий текущий объект
# строки, путём удаления
# предшествующих и завершающих
# пробельных символов

_log(('     '+str+'    ').strip)

# ---- Array ----

# вывод массива

_log(arr)

# Метод, удаляющий все
# встречающиеся элементы в массиве
# равные заданному
arr.delete(str)

# Метод, возвращающий текущий
# массив с элементами в случайном
# порядке
_log(arr0.shuffle)


# Метод, превращающий массив в
# строку путём объединения его
# элементов
_log(arr0.join)


# ---- Hash ----

# Метод, проверяющий наличие
# заданного ключа в хэше

_log(hash_.key?("a"))

# Метод, объединяющий 2 объекта
# хэшей

_log(hash_.merge(hesh_))


# ---- Range ----

# Метод, возвращающий
# максимальное значение диапазона

_log(range.max)


# Модифицировать код таким образом,
# чтобы вывод на экран соответствовал
# виду:
# Количество очков в каждой партии
# ===========================
# ===
# Партия: 1 / Выпало очков: 10
# Партия: 2 / Выпало очков: 2
# Партия: 3 / Выпало очков: 5
# Партия: 4 / Выпало очков: 12
# Партия: 5 / Выпало очков: 11
# Партия: 6 / Выпало очков: 11
# Партия: 7 / Выпало очков: 4
_third_task


# - Туристической группы - array 
# - Количества денег на счету в банке - number / bigdecimal
# - Списка книг и их количества - словарь / hash
# - Признака есть ли у человека суперспособности - boolean
# - Количества соток для участка - float 
# - Количества очков жизни игрока - fixnum
# - Имени пользователя - string
# - Содержания поста - string
# - Возрастной категории - range
# - Названия социальной сети, которое будет использоваться в коде по всему проек - string
_del_str(del,eted)

